input SpeakerRelateToOneInput {
  create: SpeakerCreateInput
  connect: SpeakerWhereUniqueInput
  disconnect: SpeakerWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Talk {
  id: ID!
  title: String
  slug: String
  description: String
  speaker: Speaker
}

input TalkWhereInput {
  AND: [TalkWhereInput]
  OR: [TalkWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_in: [String]
  title_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_in: [String]
  slug_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_in: [String]
  description_not_in: [String]
  speaker: SpeakerWhereInput
  speaker_is_null: Boolean
}

input TalkWhereUniqueInput {
  id: ID!
}

enum SortTalksBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  speaker_ASC
  speaker_DESC
}

input TalkUpdateInput {
  title: String
  slug: String
  description: String
  speaker: SpeakerRelateToOneInput
}

input TalksUpdateInput {
  id: ID!
  data: TalkUpdateInput
}

input TalkCreateInput {
  title: String
  slug: String
  description: String
  speaker: SpeakerRelateToOneInput
}

input TalksCreateInput {
  data: TalkCreateInput
}

input TalkRelateToManyInput {
  create: [TalkCreateInput]
  connect: [TalkWhereUniqueInput]
  disconnect: [TalkWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Speaker {
  id: ID!
  name: String
  slug: String
  talks(
    where: TalkWhereInput
    search: String
    sortBy: [SortTalksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Talk!]!
  _talksMeta(
    where: TalkWhereInput
    search: String
    sortBy: [SortTalksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input SpeakerWhereInput {
  AND: [SpeakerWhereInput]
  OR: [SpeakerWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_in: [String]
  slug_not_in: [String]

  """
   condition must be true for all nodes
  """
  talks_every: TalkWhereInput

  """
   condition must be true for at least 1 node
  """
  talks_some: TalkWhereInput

  """
   condition must be false for all nodes
  """
  talks_none: TalkWhereInput
}

input SpeakerWhereUniqueInput {
  id: ID!
}

enum SortSpeakersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  talks_ASC
  talks_DESC
}

input SpeakerUpdateInput {
  name: String
  slug: String
  talks: TalkRelateToManyInput
}

input SpeakersUpdateInput {
  id: ID!
  data: SpeakerUpdateInput
}

input SpeakerCreateInput {
  name: String
  slug: String
  talks: TalkRelateToManyInput
}

input SpeakersCreateInput {
  data: SpeakerCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single Talk item.
  """
  createTalk(data: TalkCreateInput): Talk

  """
   Create multiple Talk items.
  """
  createTalks(data: [TalksCreateInput]): [Talk]

  """
   Update a single Talk item by ID.
  """
  updateTalk(id: ID!, data: TalkUpdateInput): Talk

  """
   Update multiple Talk items by ID.
  """
  updateTalks(data: [TalksUpdateInput]): [Talk]

  """
   Delete a single Talk item by ID.
  """
  deleteTalk(id: ID!): Talk

  """
   Delete multiple Talk items by ID.
  """
  deleteTalks(ids: [ID!]): [Talk]

  """
   Create a single Speaker item.
  """
  createSpeaker(data: SpeakerCreateInput): Speaker

  """
   Create multiple Speaker items.
  """
  createSpeakers(data: [SpeakersCreateInput]): [Speaker]

  """
   Update a single Speaker item by ID.
  """
  updateSpeaker(id: ID!, data: SpeakerUpdateInput): Speaker

  """
   Update multiple Speaker items by ID.
  """
  updateSpeakers(data: [SpeakersUpdateInput]): [Speaker]

  """
   Delete a single Speaker item by ID.
  """
  deleteSpeaker(id: ID!): Speaker

  """
   Delete multiple Speaker items by ID.
  """
  deleteSpeakers(ids: [ID!]): [Speaker]
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Query {
  """
   Search for all Talk items which match the where clause.
  """
  allTalks(
    where: TalkWhereInput
    search: String
    sortBy: [SortTalksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Talk]

  """
   Search for the Talk item with the matching ID.
  """
  Talk(where: TalkWhereUniqueInput!): Talk

  """
   Perform a meta-query on all Talk items which match the where clause.
  """
  _allTalksMeta(
    where: TalkWhereInput
    search: String
    sortBy: [SortTalksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Speaker items which match the where clause.
  """
  allSpeakers(
    where: SpeakerWhereInput
    search: String
    sortBy: [SortSpeakersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Speaker]

  """
   Search for the Speaker item with the matching ID.
  """
  Speaker(where: SpeakerWhereUniqueInput!): Speaker

  """
   Perform a meta-query on all Speaker items which match the where clause.
  """
  _allSpeakersMeta(
    where: SpeakerWhereInput
    search: String
    sortBy: [SortSpeakersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
